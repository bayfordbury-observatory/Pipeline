from scipy.optimize import leastsqimport astropyimport numpyfrom pylab import *from astropy.io import fitsfrom datetime import datetime#x = np.array([4.438,3.438,2.438,1.438,0.438,-0.562,-1.562,-2.562,-3.562])x2 = np.arange(-6,6,0.2)#A,mu,sigma = 10, 1.0/3e-2, pi/6#y=np.array([0.016,0.193,0.497,0.936,1,0.95,0.674,0.639,0.257])fitsfile = fits.open(sys.argv[1]+".fit")print sys.argv[1]+".fit"header = fitsfile[0].headerdata = fitsfile[0].data width=header['NAXIS1']height=header['NAXIS2']hdulist1 = fits.open(sys.argv[1]+".all.fit")tbdata1 = hdulist1[1].data header1 = hdulist1[1].headernumstars = header1['NAXIS2']print(numstars)print(hdulist1[1].columns)fluxes= tbdata1['FLUX']bgs= tbdata1['BACKGROUND']Xs= tbdata1['X']Ys= tbdata1['Y']  #print "x:"#print x#print "ymeas:"#print ydef residualsfixed(p, y, x, max):	mu,sigma = p		err = y-max*np.exp(-(x - mu)*(x - mu) / (2 *sigma*sigma) )		return err	def residuals(p, y, x):	A,mu,sigma = p		err = y-A*np.exp(-(x - mu)*(x - mu) / (2 *sigma*sigma) )		return err			def pevalfixed(x, p, maxval):	return maxval *np.exp(-np.power(x - p[0], 2.) / (2 * p[1]*p[1]))	def peval(x, p):	return p[0] *np.exp(-np.power(x - p[1], 2.) / (2 * p[2]*p[2]))	def plotGauss(peak,sig,plt, col):         x=np.arange(-5,5,0.1)    y=np.arange(-5,5,0.1)    for i in range(0,100):        x[i]=round(x[i],1)        y[i]=peak*np.exp(-(x[i]*x[i]) / (2 * sig*sig))      #print x    plt.plot(x,y, color=col)    return 0#p0 = [1, 0, 1]#print "init guess:"#print array(p0)#plsq = leastsq(residuals, p0, args=(y, x))#print "solved:"#print plsq[0]#fwhm=plsq[0][2]*2.35482#print "fwhm:"#print fwhm#plt.plot(x2,peval(x2,plsq[0]),x,y,'o')#plt.show()ax=np.zeros(32)axv=np.zeros(32)fwhm=np.zeros(numstars)for i in range(0,numstars):	x=Xs[i]	y=Ys[i]	flux=fluxes[i]	bg=bgs[i]			if flux<55000 and flux>10 and x>4 and x<(width-4) and y>4 and y<(height-4):				startTime = datetime.now()             		#print "Coord: "+str(x)+" "+str(y)		x0=int(round(x))-1		y0=int(round(y))-1				k=0		m=0		for n in range (-4, 5):			#k=(n+4)*9+m+4			#print str(n)+" "+str(m)+" "+str(k)						ax[k]=data[y0+m,x0+n]-bg			if n<0:				axv[k]=0-np.sqrt((y0+m-y+1)*(y0+m-y+1)+(x0+n-x+1)*(x0+n-x+1))			else:				axv[k]=np.sqrt((y0+m-y+1)*(y0+m-y+1)+(x0+n-x+1)*(x0+n-x+1))			k=k+1				n=0		for m in range (-4, 5):			#k=(n+4)*9+m+4			#print str(n)+" "+str(m)+" "+str(k)						ax[k]=data[y0+m,x0+n]-bg			if m<0:				axv[k]=0-np.sqrt((y0+m-y+1)*(y0+m-y+1)+(x0+n-x+1)*(x0+n-x+1))			else:				axv[k]=np.sqrt((y0+m-y+1)*(y0+m-y+1)+(x0+n-x+1)*(x0+n-x+1))			k=k+1						for m in range (-3, 4):			n=m			#k=(n+4)*9+m+4			#print str(n)+" "+str(m)+" "+str(k)						ax[k]=data[y0+m,x0+n]-bg			if m<0:				axv[k]=0-np.sqrt((y0+m-y+1)*(y0+m-y+1)+(x0+n-x+1)*(x0+n-x+1))			else:				axv[k]=np.sqrt((y0+m-y+1)*(y0+m-y+1)+(x0+n-x+1)*(x0+n-x+1))			k=k+1			for m in range (3, -4,-1):			n=m			#k=(n+4)*9+m+4			#print str(n)+" "+str(m)+" "+str(k)						ax[k]=data[y0+m,x0+n]-bg			if m<0:				axv[k]=0-np.sqrt((y0+m-y+1)*(y0+m-y+1)+(x0+n-x+1)*(x0+n-x+1))			else:				axv[k]=np.sqrt((y0+m-y+1)*(y0+m-y+1)+(x0+n-x+1)*(x0+n-x+1))			k=k+1										#print k					#ax=		#ax = [data[y0,x0-5]-bg,data[y0,x0-4]-bg,data[y0,x0-3]-bg,data[y0,x0-2]-bg,data[y0,x0-1]-bg,data[y0,x0]-bg,data[y0,x0+1]-bg,data[y0,x0+2]-bg,data[y0,x0+3]-bg,data[y0,x0+4]-bg,data[y0,x0+5]-bg]					#axv=[0,1,2,3,4,5,6,7,8,9,10]		#for n in range(0,11):			#axv[n]=round(x-(x0-5+n)-1)        		maxval=max(ax)		#print maxval				#print "BG: "+str(bg)+" Maxval: "+str(maxval)+" "+str(maxvaly)		#print "ax "+str(ax)		#print " ay "+str(ay)		#print axv		#print ayv		p0 = [maxval, 0, 1]		plsq = leastsq(residuals, p0, args=(ax, axv))		p0 = [0, 1]		plsqfix = leastsq(residualsfixed, p0, args=(ax, axv, maxval))		fwhmfix=plsqfix[0][1]*2.35482				fwhm[i]=plsq[0][2]*2.35482						flux2=plsq[0][0]						#print "Sigma="+str(sigx)+","+str(sigy)		#print "FWHM="+str(round(fwhm,3))+","+str(round(fwhmy,3))		#print str(round(fwhm[i],3))+","+str(round(fwhmy[i],3))		#print "Ratio: "+str(round(sigx/sigy,3))				#print(datetime.now()-startTime)		print str(x0)+","+str(y0)+","+str(flux)+ ","+str(flux2)+","+str(maxval)+","+str(fwhm[i])+","+str(fwhmfix)		#if ratio<0.8:		if x>1260 and x<1280 and y>120 and y<130:					plt.plot(axv,ax, linestyle='none', marker='o', color='r')						print str(x0)+","+str(y0)+","+str(fwhm[i])+","+str(flux)+ ","+str(flux2)						plt.plot(x2,pevalfixed(x2,plsqfix[0], maxval),  color='c')			plt.plot(x2,peval(x2,plsq[0]),  color='b')						print plsqfix			print plsq									break             	else:		print str(flux)+ ",0"#plt.yticks([0,0.25,0.5,0.75,1,1.25])plt.xticks([-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6])plt.grid(True)plt.show()