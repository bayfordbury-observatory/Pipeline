from scipy.optimize import leastsqimport astropyimport numpyfrom pylab import *from astropy.io import fits#x = np.array([4.438,3.438,2.438,1.438,0.438,-0.562,-1.562,-2.562,-3.562])x2 = np.arange(-5,6,0.2)#A,mu,sigma = 10, 1.0/3e-2, pi/6#y=np.array([0.016,0.193,0.497,0.936,1,0.95,0.674,0.639,0.257])fitsfile = fits.open(sys.argv[1]+".fit")print sys.argv[1]+".fit"header = fitsfile[0].headerdata = fitsfile[0].data width=header['NAXIS1']height=header['NAXIS2']hdulist1 = fits.open(sys.argv[1]+".all.fit")tbdata1 = hdulist1[1].data header1 = hdulist1[1].headernumstars = header1['NAXIS2']print(numstars)print(hdulist1[1].columns)fluxes= tbdata1['FLUX']bgs= tbdata1['BACKGROUND']Xs= tbdata1['X']Ys= tbdata1['Y']  #print "x:"#print x#print "ymeas:"#print ydef residuals(p, y, x):	A,mu,sigma = p		err = y-A*np.exp(-(x - mu)*(x - mu) / (2 *sigma*sigma) )		return errdef peval(x, p):		return p[0] *np.exp(-np.power(x - p[1], 2.) / (2 * p[2]*p[2]))	def plotGauss(peak,sig,plt, col):         x=np.arange(-5,5,0.1)    y=np.arange(-5,5,0.1)    for i in range(0,100):        x[i]=round(x[i],1)        y[i]=peak*np.exp(-(x[i]*x[i]) / (2 * sig*sig))      #print x    plt.plot(x,y, color=col)    return 0#p0 = [1, 0, 1]#print "init guess:"#print array(p0)#plsq = leastsq(residuals, p0, args=(y, x))#print "solved:"#print plsq[0]#fwhm=plsq[0][2]*2.35482#print "fwhm:"#print fwhm#plt.plot(x2,peval(x2,plsq[0]),x,y,'o')#plt.show()fwhmx=np.zeros(numstars)fwhmy=np.zeros(numstars)for i in range(0,numstars):	x=Xs[i]	y=Ys[i]	flux=fluxes[i]	bg=bgs[i]			if flux<55000 and flux>10 and x>5 and x<(width-5) and y>5 and y<(height-5):			#from datetime import datetime		#startTime = datetime.now()             		#print "Coord: "+str(x)+" "+str(y)		x0=int(round(x))-1		y0=int(round(y))-1		ax = [data[y0,x0-5]-bg,data[y0,x0-4]-bg,data[y0,x0-3]-bg,data[y0,x0-2]-bg,data[y0,x0-1]-bg,data[y0,x0]-bg,data[y0,x0+1]-bg,data[y0,x0+2]-bg,data[y0,x0+3]-bg,data[y0,x0+4]-bg,data[y0,x0+5]-bg]				ay = [data[y0-5,x0]-bg,data[y0-4,x0]-bg,data[y0-3,x0]-bg,data[y0-2,x0]-bg,data[y0-1,x0]-bg,data[y0,x0]-bg,data[y0+1,x0]-bg,data[y0+2,x0]-bg,data[y0+3,x0]-bg,data[y0+4,x0]-bg,data[y0+5,x0]-bg]		axv=[0,1,2,3,4,5,6,7,8,9,10]		ayv=[0,1,2,3,4,5,6,7,8,9,10]		for n in range(0,11):			axv[n]=x-(x0-5+n)-1			ayv[n]=y-(y0-5+n)-1         		maxvalx=max(ax)		maxvaly=max(ay)				#print "BG: "+str(bg)+" Maxval: "+str(maxvalx)+" "+str(maxvaly)		#print "ax "+str(ax)		#print " ay "+str(ay)		#print axv		#print ayv		p0 = [maxvalx, 0, 1]		plsqx = leastsq(residuals, p0, args=(ax, axv))		#sigx=plsqx[0][2]		#peakx=plsqx[0][0]				#print plsq[0]				#p0 = [maxvalx, 0, 1]		plsqy = leastsq(residuals, p0, args=(ay, ayv))		#sigy=plsqy[0][2]		#peaky=plsqy[0][0]				#sigx=GaussFit(axv,ax)		#sigy=GaussFit(ayv,ay)				fwhmx[i]=plsqx[0][2]*2.35482		fwhmy[i]=plsqy[0][2]*2.35482				flux2=(plsqx[0][0]+plsqy[0][0])/2						#print "Sigma="+str(sigx)+","+str(sigy)		#print "FWHM="+str(round(fwhmx,3))+","+str(round(fwhmy,3))		#print str(round(fwhmx[i],3))+","+str(round(fwhmy[i],3))		#print "Ratio: "+str(round(sigx/sigy,3))				ratio =fwhmx[i]/fwhmy[i]				#print(datetime.now()-startTime)		print str(flux)+ ","+str(flux2)		#if ratio<0.8:		if x>11100 and x<1140 and y>430 and y<440:			plt.plot(axv,ax, marker='o', color='r')			plt.plot(ayv,ay, marker='o', color='b')			#plt.plot(axv,ax, color='r')			#plt.plot(ayv,ay, marker='o', color='b')						print str(x0)+","+str(y0)+","+str(fwhmx[i])+","+str(fwhmy[i])+ " "+str(flux)+ " "+str(flux2)						plt.plot(x2,peval(x2,plsqx[0]), 'm')			plt.plot(x2,peval(x2,plsqy[0]), 'c')						#plotGauss(peakx,sigx,plt, 'm')			#plotGauss(peaky,sigy,plt, 'c')			break             	n+=1    #plt.yticks([0,0.25,0.5,0.75,1,1.25])plt.xticks([-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6])plt.grid(True)plt.show()